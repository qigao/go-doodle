// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Articles", testArticles)
	t.Run("Comments", testComments)
	t.Run("Tags", testTags)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Articles", testArticlesDelete)
	t.Run("Comments", testCommentsDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesQueryDeleteAll)
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceDeleteAll)
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Articles", testArticlesExists)
	t.Run("Comments", testCommentsExists)
	t.Run("Tags", testTagsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Articles", testArticlesFind)
	t.Run("Comments", testCommentsFind)
	t.Run("Tags", testTagsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Articles", testArticlesBind)
	t.Run("Comments", testCommentsBind)
	t.Run("Tags", testTagsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Articles", testArticlesOne)
	t.Run("Comments", testCommentsOne)
	t.Run("Tags", testTagsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Articles", testArticlesAll)
	t.Run("Comments", testCommentsAll)
	t.Run("Tags", testTagsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Articles", testArticlesCount)
	t.Run("Comments", testCommentsCount)
	t.Run("Tags", testTagsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Articles", testArticlesHooks)
	t.Run("Comments", testCommentsHooks)
	t.Run("Tags", testTagsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Articles", testArticlesInsert)
	t.Run("Articles", testArticlesInsertWhitelist)
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ArticleToUserUsingAuthor", testArticleToOneUserUsingAuthor)
	t.Run("CommentToArticleUsingArticle", testCommentToOneArticleUsingArticle)
	t.Run("CommentToUserUsingUser", testCommentToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ArticleToTags", testArticleToManyTags)
	t.Run("ArticleToComments", testArticleToManyComments)
	t.Run("ArticleToUsers", testArticleToManyUsers)
	t.Run("TagToArticles", testTagToManyArticles)
	t.Run("UserToAuthorArticles", testUserToManyAuthorArticles)
	t.Run("UserToComments", testUserToManyComments)
	t.Run("UserToArticles", testUserToManyArticles)
	t.Run("UserToFollowerUsers", testUserToManyFollowerUsers)
	t.Run("UserToFollowingUsers", testUserToManyFollowingUsers)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ArticleToUserUsingAuthorArticles", testArticleToOneSetOpUserUsingAuthor)
	t.Run("CommentToArticleUsingComments", testCommentToOneSetOpArticleUsingArticle)
	t.Run("CommentToUserUsingComments", testCommentToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ArticleToUserUsingAuthorArticles", testArticleToOneRemoveOpUserUsingAuthor)
	t.Run("CommentToArticleUsingComments", testCommentToOneRemoveOpArticleUsingArticle)
	t.Run("CommentToUserUsingComments", testCommentToOneRemoveOpUserUsingUser)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ArticleToTags", testArticleToManyAddOpTags)
	t.Run("ArticleToComments", testArticleToManyAddOpComments)
	t.Run("ArticleToUsers", testArticleToManyAddOpUsers)
	t.Run("TagToArticles", testTagToManyAddOpArticles)
	t.Run("UserToAuthorArticles", testUserToManyAddOpAuthorArticles)
	t.Run("UserToComments", testUserToManyAddOpComments)
	t.Run("UserToArticles", testUserToManyAddOpArticles)
	t.Run("UserToFollowerUsers", testUserToManyAddOpFollowerUsers)
	t.Run("UserToFollowingUsers", testUserToManyAddOpFollowingUsers)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ArticleToTags", testArticleToManySetOpTags)
	t.Run("ArticleToComments", testArticleToManySetOpComments)
	t.Run("ArticleToUsers", testArticleToManySetOpUsers)
	t.Run("TagToArticles", testTagToManySetOpArticles)
	t.Run("UserToAuthorArticles", testUserToManySetOpAuthorArticles)
	t.Run("UserToComments", testUserToManySetOpComments)
	t.Run("UserToArticles", testUserToManySetOpArticles)
	t.Run("UserToFollowerUsers", testUserToManySetOpFollowerUsers)
	t.Run("UserToFollowingUsers", testUserToManySetOpFollowingUsers)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ArticleToTags", testArticleToManyRemoveOpTags)
	t.Run("ArticleToComments", testArticleToManyRemoveOpComments)
	t.Run("ArticleToUsers", testArticleToManyRemoveOpUsers)
	t.Run("TagToArticles", testTagToManyRemoveOpArticles)
	t.Run("UserToAuthorArticles", testUserToManyRemoveOpAuthorArticles)
	t.Run("UserToComments", testUserToManyRemoveOpComments)
	t.Run("UserToArticles", testUserToManyRemoveOpArticles)
	t.Run("UserToFollowerUsers", testUserToManyRemoveOpFollowerUsers)
	t.Run("UserToFollowingUsers", testUserToManyRemoveOpFollowingUsers)
}

func TestReload(t *testing.T) {
	t.Run("Articles", testArticlesReload)
	t.Run("Comments", testCommentsReload)
	t.Run("Tags", testTagsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Articles", testArticlesReloadAll)
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Articles", testArticlesSelect)
	t.Run("Comments", testCommentsSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Articles", testArticlesUpdate)
	t.Run("Comments", testCommentsUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceUpdateAll)
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
